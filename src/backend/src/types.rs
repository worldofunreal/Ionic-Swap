use candid::{CandidType, Deserialize};
use std::collections::HashMap;

// ============================================================================
// HTLC AND CROSS-CHAIN SWAP TYPES
// ============================================================================

// HTLC Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum HTLCStatus {
    Created,
    Deposited,
    Claimed,
    Refunded,
    Expired,
}

// Swap Direction
#[derive(CandidType, Deserialize, Clone, Debug)]
pub enum SwapDirection {
    ICPtoEVM,      // ICP -> EVM
    EVMtoICP,      // EVM -> ICP
    ICPtoSolana,   // ICP -> Solana
    SolanatoICP,   // Solana -> ICP
    EVMtoSolana,   // EVM -> Solana
    SolanatoEVM,   // Solana -> EVM
}

// Chain IDs
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum ChainId {
    ICP = 0,
    Sepolia = 1,
    SolanaTestnet = 2,
    SolanaDevnet = 3,
}

// HTLC Structure (matching EVM contract)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct HTLC {
    pub id: String,                 // HTLC ID (bytes32)
    pub sender: String,             // Sender's address
    pub recipient: String,          // Recipient's address
    pub amount: String,             // Amount to swap
    pub hashlock: String,           // Hash of the secret (bytes32)
    pub secret: Option<String>,     // The actual secret (only after reveal)
    pub timelock: u64,              // Expiration timestamp
    pub status: HTLCStatus,         // 0=Locked, 1=Claimed, 2=Refunded
    pub token: String,              // Token address (0x0 for ETH)
    pub source_chain: u64,          // Source chain ID
    pub target_chain: u64,          // Target chain ID
    pub is_cross_chain: bool,       // Whether this is part of a cross-chain swap
    pub order_hash: String,         // Order hash for tracking
    pub created_at: u64,            // Creation timestamp
}

// Atomic Swap Order (for cross-chain coordination)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct AtomicSwapOrder {
    pub order_id: String,
    pub maker: String,              // Maker's address
    pub taker: String,              // Taker's address
    pub source_token: String,       // Source token address
    pub destination_token: String,  // Destination token address
    pub source_amount: String,      // Source amount
    pub destination_amount: String, // Destination amount
    pub secret: String,             // Secret for HTLC (generated by ICP)
    pub hashlock: String,           // Hash of the secret
    pub timelock: u64,              // Expiration timestamp
    pub source_htlc_id: Option<String>, // HTLC ID on source chain
    pub destination_htlc_id: Option<String>, // HTLC ID on destination chain
    pub status: SwapOrderStatus,
    pub created_at: u64,
    pub expires_at: u64,
    // New fields for destination addresses
    pub evm_destination_address: Option<String>, // Where EVM tokens should be sent (0x address)
    pub icp_destination_principal: Option<String>, // Where ICP tokens should be sent (principal)
    pub solana_destination_address: Option<String>, // Where Solana tokens should be sent (base58 address)
    // Counter order tracking for token forwarding
    pub counter_order_id: Option<String>, // ID of the paired counter order
}

// Swap Order Status
#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum SwapOrderStatus {
    Created,
    SourceHTLCCreated,
    DestinationHTLCCreated,
    SourceHTLCClaimed,
    DestinationHTLCClaimed,
    Completed,
    Expired,
    Cancelled,
    Refunded,
}

// Cross-chain Swap Order (legacy - keeping for reference)
#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CrossChainSwapOrder {
    pub order_id: String,
    pub maker: String,
    pub taker: String,
    pub source_asset: String,
    pub destination_asset: String,
    pub source_amount: String,
    pub destination_amount: String,
    pub source_chain_id: u64,
    pub destination_chain_id: u64,
    pub hashlock: String,
    pub secret: Option<String>,
    pub status: HTLCStatus,
    pub created_at: u64,
    pub expiration_time: u64,
    pub direction: SwapDirection,
}

// ============================================================================
// EIP-2771 MINIMAL FORWARDER TYPES
// ============================================================================

#[derive(CandidType, Deserialize)]
pub struct PermitRequest {
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub nonce: String, // User's nonce that was used in the permit signature
    pub deadline: String,
    pub v: String,
    pub r: String,
    pub s: String,
    pub signature: String,
}

#[derive(CandidType, Deserialize)]
pub struct GaslessApprovalRequest {
    pub permit_request: PermitRequest,
    pub user_address: String,
    pub amount: String,
    pub token_address: String, // Add token address to make it explicit
}

// ============================================================================
// PERMIT SUBMISSION TYPES (LEGACY - KEEPING FOR REFERENCE)
// ============================================================================

#[derive(CandidType, Deserialize)]
pub struct PermitData {
    pub token_address: String,
    pub owner: String,
    pub spender: String,
    pub value: String,
    pub deadline: u64,
    pub v: u8,
    pub r: String,
    pub s: String,
    pub signature: String,
} 

// ============================================================================
// UNIFIED LIQUIDITY POOL TYPES
// ============================================================================

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct UnifiedLiquidityPool {
    pub pool_id: String,
    pub base_asset: String,
    pub chain_distribution: HashMap<String, ChainLiquidity>,
    pub total_unified_liquidity: u128,
    pub yield_optimization: YieldStrategy,
    pub risk_parameters: RiskConfig,
    pub created_at: u64,
    pub last_optimized: u64,
    pub is_active: bool,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct ChainLiquidity {
    pub chain_id: String,
    pub available_liquidity: u128,
    pub borrowed_amount: u128,
    pub current_apy: f64,
    pub utilization_rate: f64,
    pub last_updated: u64,
    pub risk_score: u8,
    pub is_active: bool,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct YieldStrategy {
    pub optimization_interval: u64,        // seconds
    pub min_yield_improvement: f64,       // percentage
    pub max_capital_movement: u128,       // amount
    pub target_utilization: f64,          // percentage
    pub risk_tolerance: u8,               // 1-10 scale
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct RiskConfig {
    pub max_chain_exposure: f64,          // percentage
    pub min_collateral_ratio: f64,        // ratio
    pub liquidation_threshold: f64,       // percentage
    pub emergency_pause_threshold: f64,   // percentage
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CrossChainLendingPosition {
    pub position_id: String,
    pub user: String,
    pub borrowed_asset: String,
    pub borrowed_amount: u128,
    pub collateral_chain: String,
    pub collateral_asset: String,
    pub collateral_amount: u128,
    pub liquidation_threshold: f64,
    pub status: LendingPositionStatus,
    pub created_at: u64,
}

#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum LendingPositionStatus {
    Active,
    UnderCollateralized,
    Liquidated,
    Closed,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CapitalMove {
    pub move_id: String,
    pub pool_id: String,
    pub from_chain: String,
    pub to_chain: String,
    pub amount: u128,
    pub expected_yield_improvement: f64,
    pub risk_score: u8,
    pub execution_time: u64,
    pub status: CapitalMoveStatus,
}

#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum CapitalMoveStatus {
    Pending,
    Executing,
    Completed,
    Failed,
    Cancelled,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct ChainState {
    pub chain_id: String,
    pub last_block: u64,
    pub last_update: u64,
    pub is_healthy: bool,
    pub response_time_ms: u64,
    pub error_count: u32,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub struct CrossChainOperation {
    pub operation_id: String,
    pub pool_id: String,
    pub operation_type: CrossChainOperationType,
    pub source_chain: String,
    pub target_chain: String,
    pub amount: u128,
    pub status: CrossChainOperationStatus,
    pub created_at: u64,
    pub completed_at: Option<u64>,
    pub error_message: Option<String>,
}

#[derive(CandidType, Deserialize, Clone, Debug)]
pub enum CrossChainOperationType {
    Deposit,
    Withdrawal,
    YieldOptimization,
    LiquidityRebalancing,
    EmergencyWithdrawal,
}

#[derive(CandidType, Deserialize, Clone, Debug, PartialEq)]
pub enum CrossChainOperationStatus {
    Pending,
    Executing,
    Completed,
    Failed,
    Cancelled,
}