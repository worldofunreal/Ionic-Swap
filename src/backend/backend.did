type PermitRequest = record {
  owner : text;
  spender : text;
  value : text;
  nonce : text;
  deadline : text;
  v : text;
  r : text;
  s : text;
  signature : text;
};

type GaslessApprovalRequest = record {
  permit_request : PermitRequest;
  user_address : text;
  amount : text;
  token_address : text;
};

// Atomic Swap Types
type SwapOrderStatus = variant {
  Created;
  SourceHTLCCreated;
  DestinationHTLCCreated;
  SourceHTLCClaimed;
  DestinationHTLCClaimed;
  Completed;
  Expired;
  Cancelled;
};

type AtomicSwapOrder = record {
  order_id : text;
  maker : text;
  taker : text;
  source_token : text;
  destination_token : text;
  source_amount : text;
  destination_amount : text;
  secret : text;
  hashlock : text;
  timelock : nat64;
  source_htlc_id : opt text;
  destination_htlc_id : opt text;
  status : SwapOrderStatus;
  created_at : nat64;
  expires_at : nat64;
  evm_destination_address : opt text;
  icp_destination_principal : opt text;
  counter_order_id : opt text;
};

// Cross-Chain Swap Types
type SwapDirection = variant {
  EVMtoICP;
  ICPtoEVM;
};

type CrossChainSwapOrder = record {
  order_id : text;
  maker : text;
  taker : text;
  source_asset : text;
  destination_asset : text;
  source_amount : text;
  destination_amount : text;
  source_chain_id : nat64;
  destination_chain_id : nat64;
  hashlock : text;
  secret : opt text;
  status : HTLCStatus;
  created_at : nat64;
  expiration_time : nat64;
  direction : SwapDirection;
};

// HTLC Types
type HTLCStatus = variant {
  Created;
  Deposited;
  Claimed;
  Refunded;
  Expired;
};

type HTLC = record {
  id : text;
  sender : text;
  recipient : text;
  amount : text;
  hashlock : text;
  secret : opt text;
  timelock : nat64;
  status : HTLCStatus;
  token : text;
  source_chain : nat64;
  target_chain : nat64;
  is_cross_chain : bool;
  order_hash : text;
  created_at : nat64;
};

// Bridgeless Token Types
type ChainInitData = record {
  chain_name : text;
  chain_id : text;
  token_symbol : text;
  token_name : text;
  total_supply : nat;
};

type ChainLedger = record {
  chain_id : text;
  chain_name : text;
  token_symbol : text;
  token_name : text;
  total_supply : nat;
  circulating_supply : nat;
  created_at : nat64;
};

type CrossChainTransfer = record {
  transfer_id : text;
  amount : text;
  source_chain : text;
  target_chain : text;
  recipient : text;
  status : text;
  created_at : nat64;
};

service : {
  // JSON-RPC Methods
  "get_sepolia_block_number" : () -> (variant { Ok : text; Err : text });
  "get_transaction_receipt" : (text) -> (variant { Ok : text; Err : text });
  "get_balance" : (text) -> (variant { Ok : text; Err : text });
  "get_transaction_count" : (text) -> (variant { Ok : text; Err : text });
  
  // Contract Interaction Methods
  "get_icp_network_signer" : () -> (variant { Ok : text; Err : text });
  "get_claim_fee" : () -> (variant { Ok : text; Err : text });
  "get_refund_fee" : () -> (variant { Ok : text; Err : text });
  "get_total_fees" : () -> (variant { Ok : text; Err : text });
  
  // Testing Methods
  "test_all_contract_functions" : () -> (variant { Ok : text; Err : text });
  "test_basic_rpc" : () -> (variant { Ok : text; Err : text });
  "test_deployment_transaction" : () -> (variant { Ok : text; Err : text });
  
  // Utility Methods
  "get_contract_info" : () -> (text);
  "initialize_nonce" : () -> (variant { Ok : text; Err : text });
  
  // EVM Integration Methods
  "get_public_key" : () -> (variant { Ok : text; Err : text });
  "get_ethereum_address" : () -> (variant { Ok : text; Err : text });
  "test_signing_address" : () -> (variant { Ok : text; Err : text });
  "test_simple_transaction" : () -> (variant { Ok : text; Err : text });
  
  // Gasless Approval Method
  "execute_gasless_approval" : (GaslessApprovalRequest) -> (variant { Ok : text; Err : text });
  
  // Core HTLC Functions
  "create_htlc_escrow" : (text, text, text, text, text, text, nat64, SwapDirection, nat64, nat64) -> (variant { Ok : text; Err : text });
  "deposit_to_htlc" : (text) -> (variant { Ok : text; Err : text });
  "claim_htlc_funds" : (text, text) -> (variant { Ok : text; Err : text });
  "refund_htlc_funds" : (text) -> (variant { Ok : text; Err : text });
  
  // Cross-Chain Swap Functions
  "create_cross_chain_swap_order" : (text, text, text, text, text, text, nat64, nat64, nat64) -> (variant { Ok : text; Err : text });
  "execute_cross_chain_swap" : (text) -> (variant { Ok : text; Err : text });
  "complete_cross_chain_swap" : (text) -> (variant { Ok : text; Err : text });
  
  // Query Functions
  "get_htlc" : (text) -> (opt HTLC);
  "get_swap_order" : (text) -> (opt CrossChainSwapOrder);
  "get_all_htlcs" : () -> (vec HTLC);
  "get_all_swap_orders" : () -> (vec CrossChainSwapOrder);
  
  // Atomic Swap Methods
  "create_icp_to_evm_order" : (text, text, text, text, text, text, nat64) -> (variant { Ok : text; Err : text });
  "create_evm_to_icp_order" : (text, text, text, text, text, text, nat64, PermitRequest) -> (variant { Ok : text; Err : text });
  "create_evm_htlc" : (text, bool) -> (variant { Ok : text; Err : text });
  "claim_evm_htlc" : (text, text) -> (variant { Ok : text; Err : text });
  "execute_atomic_swap" : (text) -> (variant { Ok : text; Err : text });
  "get_atomic_swap_order" : (text) -> (opt AtomicSwapOrder) query;
  "get_all_atomic_swap_orders" : () -> (vec AtomicSwapOrder) query;
  "get_orders_by_status" : (SwapOrderStatus) -> (vec AtomicSwapOrder) query;
  "get_compatible_orders" : (text) -> (vec AtomicSwapOrder) query;
  "check_expired_orders" : () -> (variant { Ok : text; Err : text });
  
  // ICRC Public API Endpoints
  "transfer_icrc_tokens_public" : (text, text, nat) -> (variant { Ok : text; Err : text });
  "get_icrc_balance_public" : (text, text) -> (variant { Ok : nat; Err : text }) query;
  "transfer_from_icrc_tokens_public" : (text, text, text, nat) -> (variant { Ok : text; Err : text });
  
  // ICP HTLC Public API Endpoints
  "create_icp_htlc_public" : (text, text, nat, text, nat64, text) -> (variant { Ok : text; Err : text });
  "claim_icp_htlc_public" : (text, text, text) -> (variant { Ok : text; Err : text });
  "refund_icp_htlc_public" : (text, text) -> (variant { Ok : text; Err : text });
  "get_icp_htlc_status_public" : (text) -> (variant { Ok : HTLCStatus; Err : text }) query;
  "list_icp_htlcs_public" : () -> (vec HTLC) query;
  
  // Cross-Chain Swap Public API Endpoints
  "coordinate_cross_chain_swap_public" : (text, SwapDirection) -> (variant { Ok : text; Err : text });
  "validate_cross_chain_order_public" : (text) -> (variant { Ok : bool; Err : text }) query;
  "get_cross_chain_swap_status_public" : (text) -> (variant { Ok : SwapOrderStatus; Err : text }) query;
  "complete_cross_chain_swap_public" : (text, text) -> (variant { Ok : text; Err : text });
  
  // Bridgeless Token API Endpoints
  "initialize_bridgeless_token_public" : (text, text, text) -> (variant { Ok : text; Err : text });
  "create_chain_ledger_public" : (text, ChainInitData) -> (variant { Ok : text; Err : text });
  "authorize_cross_chain_transfer_public" : (text, text, text, text) -> (variant { Ok : text; Err : text });
  "get_all_chain_ledgers_public" : () -> (vec ChainLedger) query;
  "get_chain_ledger_public" : (text) -> (opt ChainLedger) query;
  "get_all_cross_chain_transfers_public" : () -> (vec CrossChainTransfer) query;
  "get_cross_chain_transfer_public" : (text) -> (opt CrossChainTransfer) query;
  "get_root_contract_address_public" : () -> (opt text) query;
  
  // ============================================================================
  // SOLANA PUBLIC API ENDPOINTS
  // ============================================================================
  
  // Basic Solana Operations
  "get_solana_balance_public" : (text) -> (variant { Ok : nat64; Err : text });
  "get_solana_slot_public" : () -> (variant { Ok : nat64; Err : text });
  "get_solana_account_info_public" : (text) -> (variant { Ok : text; Err : text });
  
  // SPL Token Operations
  "get_spl_token_balance_public" : (text) -> (variant { Ok : text; Err : text });
  "get_associated_token_address_public" : (text, text) -> (variant { Ok : text; Err : text }) query;
  "create_associated_token_account_instruction_public" : (text, text, text) -> (variant { Ok : text; Err : text }) query;
  "transfer_spl_tokens_instruction_public" : (text, text, text, nat64) -> (variant { Ok : text; Err : text }) query;
  
  // Transaction Operations
  "send_sol_transaction_public" : (text, text, nat64) -> (variant { Ok : text; Err : text });
  "send_spl_token_transaction_public" : (text, text, text, nat64) -> (variant { Ok : text; Err : text });
  
  // Wallet Management
  "get_solana_wallet_public" : (text) -> (variant { Ok : text; Err : text }) query;
  
  // ============================================================================
  // UNIFIED CROSS-CHAIN SWAP FUNCTIONS
  // ============================================================================
  
  // Legacy permit submission
  "submit_permit_signature" : (PermitRequest) -> (variant { Ok : text; Err : text });
  
  // ERC20 transfer
  "transfer_erc20_tokens_public" : (text, text, text) -> (variant { Ok : text; Err : text });
}
