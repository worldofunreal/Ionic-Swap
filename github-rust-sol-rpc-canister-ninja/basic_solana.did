type InitArg = record {
    // The canister will interact with this Solana network.
    // If not specified, the value is set to `Devnet`.
    solana_network : opt SolanaNetwork;
    // Commitment level to use when interacting with the Solana blockchain.
    // If not specified, the value is set to `finalized`.
    solana_commitment_level : opt CommitmentLevel;
    // EdDSA keys will be derived from this key.
    // If not specified, the value is set to `TestKeyLocalDevelopment`.
    ed25519_key_name : opt Ed25519KeyName;
    // The canister will interact with this SOL RPC canister.
    // If not specified, the value is set to `tghme-zyaaa-aaaar-qarca-cai`.
    sol_rpc_canister_id : opt principal;
};

type SolanaNetwork = variant {
    // Live production environment using the SOL RPC canister's default RPC providers for Mainnet.
    // Only select this when using the production or staging SOL RPC canisters.
    Mainnet;
    // Public testing and development using the SOL RPC canister's default RPC providers for Devnet.
    // Only select this when using the production or staging SOL RPC canisters.
    Devnet;
    // Custom RPC endpoint.
    // This is useful, for example, when using a locally deployed SOL RPC canister that connects either
    // to the Solana Foundation's [public RPC endpoints](https://solana.com/docs/references/clusters),
    // or a [Solana test validator](https://solana.com/developers/guides/getstarted/solana-test-validator)
    // running locally.
    Custom : RpcEndpoint;
};

// A JSON-RPC endpoint
type RpcEndpoint = record {
    // The JSON-RPC endpoint URL, e.g. https://api.devnet.solana.com
    url : text;
    // Headers to include in requests to this endpoint, e.g. a bearer token header.
    headers : opt vec HttpHeader;
};

// An HTTP header.
type HttpHeader = record {
  // The header value
  value : text;
  // The header name
  name : text
};

// Commitment levels in Solana, representing finality guarantees of transactions and state queries.
// See https://solana.com/de/docs/rpc#configuring-state-commitment.
type CommitmentLevel = variant {
  processed;
  confirmed;
  finalized;
};

type Ed25519KeyName = variant {
    // For local development with `dfx`.
    LocalDevelopment;
    // For testing with the Internet Computer's test key.
    MainnetTestKey1;
    // For running the canister in a production environment using the Internet Computer's production key.
    MainnetProdKey1;
};

// Atomic unit of SOL, i.e., 1 SOL = 10^9 Lamports
type Lamport = nat;

// Address on Solana i.e. a base58-encoded Ed25519 public key or Program Derived Address (PDA).
type Address = text;

// A transaction ID on Solana, i.e. the first signature in a transaction.
type Txid = text;

// Hash value used as recent_blockhash field in Transactions.
type Blockhash = text;

// A human-readable representation of a token amount, as returned by the Solana `getTokenAccountBalance` RPC method.
type TokenAmount = record {
  // The raw balance without decimals, a string representation of a nat64.
  amount : text;
  // Number of base 10 digits to the right of the decimal place.
  decimals : nat8;
  // DEPRECATED: The balance, using mint-prescribed decimals.
  uiAmount : opt float64;
  // The balance as a string, using mint-prescribed decimals.
  uiAmountString : text;
};

service : (InitArg) -> {
    // Returns the Solana address derived from a principal.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the address from.
    //   If omitted, the caller's principal is used.
    solana_account : (owner: opt principal) -> (Address);

    // Returns the address of a Solana nonce account derived from a principal.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the nonce account from.
    //   If omitted, the caller's principal is used.
    nonce_account : (owner: opt principal) -> (Address);

    // Returns the address of the SPL associated token account (ATA) derived
    // from a principal and a token mint.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the ATA for. If omitted,
    //   the caller's principal is used.
    // - `mint_account`: The SPL token mint address.
    associated_token_account : (
        owner: opt principal,
        mint_account: Address
    ) -> (Address);

    // Returns the SOL balance of a given account, in lamports.
    //
    // Parameters:
    // - `account` (optional): The account address to query. If omitted,
    //   the address is derived from the caller's principal.
    get_balance : (account: opt Address) -> (Lamport);

    // Returns the current blockhash from a nonce account.
    //
    // Parameters:
    // - `account` (optional): The nonce account address to query. If omitted,
    //   the address is derived from the caller's principal.
    get_nonce : (account: opt Address) -> (Blockhash);

    // Returns the SPL token balance of an associated token account (ATA).
    //
    // Parameters:
    // - `account` (optional): The ATA address to query. If omitted, the
    //   address is derived from the caller's principal and the mint address.
    // - `mint_account`: The SPL token mint address.
    get_spl_token_balance : (
        account: opt Address,
        mint_account: Address
    ) -> (TokenAmount);

    // Creates a nonce account and returns its address.
    //
    // Parameters:
    // - `owner` (optional): The principal whose derived address will be the
    //   nonce authority. If omitted, the caller's principal is used.
    create_nonce_account : (owner: opt principal) -> (Address);

    // Creates an SPL associated token account (ATA) and returns its address.
    //
    // Parameters:
    // - `owner` (optional): The ATA address is derived from this principal and
    //   the mint address. If omitted, the caller's principal is used.
    // - `mint_account`: The SPL token mint address.
    create_associated_token_account : (
        owner: opt principal,
        mint_account: Address
    ) -> (Address);

    // Sends SOL from a principal's derived address to a recipient Solana
    // address. The transaction is built using a recent blockhash.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the sender address from.
    //   If omitted, the caller's principal is used.
    // - `to`: The recipient Solana address.
    // - `amount`: The amount of SOL to send, in lamports.
    send_sol : (
        owner: opt principal,
        to: Address,
        amount: Lamport
    ) -> (Txid);

    // Sends SOL a principal's derived address to a recipient Solana address
    // using a durable nonce. The sender principal must already have a nonce
    // account, see the `create_nonce_account` method.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the sender and nonce
    //   addresses from. If omitted, the caller's principal is used.
    // - `to`: The recipient Solana address.
    // - `amount`: The amount of SOL to send, in lamports.
    send_sol_with_durable_nonce : (
        owner: opt principal,
        to: Address,
        amount: Lamport
    ) -> (Txid);

    // Sends SPL tokens from the sender's associated token account (ATA)
    // to the recipient's ATA, derived from the provided recipient Solana
    // address and token mint.
    //
    // Both the sender and recipient must already have initialized ATAs for
    // the given SPL token mint. This method does **not** create ATAs or
    // initialize them.
    //
    // Parameters:
    // - `owner` (optional): The principal used to derive the senderâ€™s ATA.
    //   If omitted, the caller's principal is used.
    // - `mint_account`: The SPL token mint address.
    // - `to`: The recipient's Solana address (i.e., their wallet address,
    //   not their ATA).
    // - `amount`: The number of tokens to send, in base units.
    send_spl_token : (
        owner: opt principal,
        mint_account: Address,
        to: Address,
        amount: nat
    ) -> (Txid);
}

